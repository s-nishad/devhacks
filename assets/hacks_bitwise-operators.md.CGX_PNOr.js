import{_ as s,c as t,o as a,ae as e}from"./chunks/framework.DlG2qiMf.js";const g=JSON.parse('{"title":"Bitwise Operators","description":"","frontmatter":{},"headers":[],"relativePath":"hacks/bitwise-operators.md","filePath":"hacks/bitwise-operators.md"}'),n={name:"hacks/bitwise-operators.md"};function h(p,i,l,d,r,k){return a(),t("div",null,i[0]||(i[0]=[e('<h1 id="bitwise-operators" tabindex="-1">Bitwise Operators <a class="header-anchor" href="#bitwise-operators" aria-label="Permalink to &quot;Bitwise Operators&quot;">​</a></h1><p>Bitwise operators are operators in C, C++, Python, and many other languages that allow us to manipulate individual bits of integer data directly, extremely useful for low-level programming, performance optimization, flags, and embedded systems.</p><hr><h2 id="bitwise-and" tabindex="-1">Bitwise AND (<code>&amp;</code>) <a class="header-anchor" href="#bitwise-and" aria-label="Permalink to &quot;Bitwise AND (`&amp;`)&quot;">​</a></h2><p><strong>Operation:</strong> Sets each bit to 1 if <em>both</em> bits are 1.<br><strong>Use case:</strong> Masking bits (extracting certain bits).</p><table tabindex="0"><thead><tr><th>a</th><th>b</th><th>a &amp; b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1100 (binary)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1010</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1000 = 8</span></span></code></pre></div><hr><h2 id="bitwise-or" tabindex="-1">Bitwise OR (<code>|</code>) <a class="header-anchor" href="#bitwise-or" aria-label="Permalink to &quot;Bitwise OR (`|`)&quot;">​</a></h2><p><strong>Operation:</strong> Sets each bit to 1 if <em>at least one</em> bit is 1.<br><strong>Use case:</strong> Combine bits or set certain flags.</p><table tabindex="0"><thead><tr><th>a</th><th>b</th><th>a | b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1100</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1010</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1110 = 14</span></span></code></pre></div><hr><h2 id="bitwise-xor" tabindex="-1">Bitwise XOR (<code>^</code>) <a class="header-anchor" href="#bitwise-xor" aria-label="Permalink to &quot;Bitwise XOR (`^`)&quot;">​</a></h2><p><strong>Operation:</strong> Sets each bit to 1 if the bits are <em>different</em>.<br><strong>Use case:</strong> Toggling bits, simple encryption, or swapping without temp variable.</p><table tabindex="0"><thead><tr><th>a</th><th>b</th><th>a ^ b</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1100</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1010</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 0110 = 6</span></span></code></pre></div><hr><h2 id="bitwise-not" tabindex="-1">Bitwise NOT (<code>~</code>) <a class="header-anchor" href="#bitwise-not" aria-label="Permalink to &quot;Bitwise NOT (`~`)&quot;">​</a></h2><p><strong>Operation:</strong> Inverts all bits (1 → 0, 0 → 1).<br><strong>Use case:</strong> Negation or complement.</p><p><strong>Example:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 0000 1100</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1111 0011 = -13 (in 2’s complement)</span></span></code></pre></div><hr><h2 id="left-shift" tabindex="-1">Left Shift (<code>&lt;&lt;</code>) <a class="header-anchor" href="#left-shift" aria-label="Permalink to &quot;Left Shift (`&lt;&lt;`)&quot;">​</a></h2><p><strong>Operation:</strong> Shifts bits to the left, filling with zeros.<br> Each left shift <strong>multiplies by 2</strong>.</p><p><strong>Example:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 0000 0101</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 0000 1010 = 10</span></span></code></pre></div><p>💡 <code>a &lt;&lt; n</code> → equals <code>a * 2^n</code></p><hr><h2 id="right-shift" tabindex="-1">Right Shift (<code>&gt;&gt;</code>) <a class="header-anchor" href="#right-shift" aria-label="Permalink to &quot;Right Shift (`&gt;&gt;`)&quot;">​</a></h2><p><strong>Operation:</strong> Shifts bits to the right.<br> Each right shift <strong>divides by 2</strong> (for positive numbers).</p><p><strong>Example:</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 0001 0100</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 0000 0101 = 5</span></span></code></pre></div><p>💡 <code>a &gt;&gt; n</code> → equals <code>a / 2^n</code></p><hr><h2 id="bit-manipulation-tricks" tabindex="-1">Bit Manipulation Tricks <a class="header-anchor" href="#bit-manipulation-tricks" aria-label="Permalink to &quot;Bit Manipulation Tricks&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Operation</th><th>Expression</th><th>Example</th></tr></thead><tbody><tr><td>Check if bit <code>i</code> is set</td><td><code>(n &gt;&gt; i) &amp; 1</code></td><td>Check if 3rd bit of <code>n</code> is 1</td></tr><tr><td>Set bit <code>i</code></td><td><code>n | (1 &lt;&lt; i)</code></td><td>Turn on 2nd bit</td></tr><tr><td>Clear bit <code>i</code></td><td><code>n &amp; ~(1 &lt;&lt; i)</code></td><td>Turn off 2nd bit</td></tr><tr><td>Toggle bit <code>i</code></td><td><code>n ^ (1 &lt;&lt; i)</code></td><td>Flip 2nd bit</td></tr><tr><td>Remove last set bit</td><td><code>n &amp; (n - 1)</code></td><td>Turns off the rightmost 1</td></tr><tr><td>Get lowest set bit</td><td><code>n &amp; -n</code></td><td>Isolates rightmost 1</td></tr></tbody></table><hr><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Bitwise operators are <strong>fast</strong> and <strong>powerful</strong> for:</p><ul><li>Device drivers &amp; OS kernels</li><li>Network packet handling</li><li>Cryptography and compression</li><li>Game development and graphics</li></ul><p>Mastering bitwise operations gives us deep control over how data is stored and processed at the binary level.</p><hr>',46)]))}const c=s(n,[["render",h]]);export{g as __pageData,c as default};
